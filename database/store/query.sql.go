// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (
  name, town, postal_code, created_by
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, town, postal_code, created_at, updated_at, created_by
`

type CreatePropertyParams struct {
	Name       string        `json:"name"`
	Town       string        `json:"town"`
	PostalCode string        `json:"postal_code"`
	CreatedBy  sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.Name,
		arg.Town,
		arg.PostalCode,
		arg.CreatedBy,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Town,
		&i.PostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, first_name, last_name
) VALUES (
  $1, $2, $3
)
RETURNING id, email, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, first_name, last_name, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProperty = `-- name: GetProperty :one
SELECT properties.id, name, town, postal_code, properties.created_at, properties.updated_at, created_by, users.id, email, first_name, last_name, users.created_at, users.updated_at FROM properties
JOIN users ON properties.created_by = users.id
WHERE properties.id = $1
LIMIT 1
`

type GetPropertyRow struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Town        string        `json:"town"`
	PostalCode  string        `json:"postal_code"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	CreatedBy   sql.NullInt64 `json:"created_by"`
	ID_2        int64         `json:"id_2"`
	Email       string        `json:"email"`
	FirstName   string        `json:"first_name"`
	LastName    string        `json:"last_name"`
	CreatedAt_2 time.Time     `json:"created_at_2"`
	UpdatedAt_2 sql.NullTime  `json:"updated_at_2"`
}

func (q *Queries) GetProperty(ctx context.Context, id int64) (GetPropertyRow, error) {
	row := q.db.QueryRowContext(ctx, getProperty, id)
	var i GetPropertyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Town,
		&i.PostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.ID_2,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, first_name, last_name, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
