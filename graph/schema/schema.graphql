# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Upload

# Represent new user parameters
input NewUser {
  email: String!
  first_name: String!
  last_name: String!
  avatar: String!
  phone: String!
}

# Represent new property parameters
input NewProperty {
  name: String!
  town: String!
  postalCode: String!
  type: String!
  createdBy: ID!
}

# Represent new property amenity parameters
input AmenityInput {
  name: String!
  provider: String!
  category: String
  propertyId: ID!
}

# Represent new property unit parameters
input PropertyUnitInput {
  propertyId: ID!
  bathrooms: Int!
}

# Represent new property unit bedroom(s) parameter
input UnitBedroomInput {
  propertyUnitId: ID
  bedroomNumber: Int!
  enSuite: Boolean!
  master: Boolean!
}

# Represent new property unit tenancy parameters
input TenancyInput {
  startDate: Time!
  endDate: Time
  propertyUnitId: ID!
}

# Represents supported country codes
enum CountryCode { KE }

# Represent send verification parameters
input VerificationInput {
  phone: String!
  email: String
  countryCode: CountryCode!
  verifyCode: String
}

# Represent user handshake input
input HandshakeInput {
  phone: String!
}

# Represent user update input
input UpdateUserInput {
  first_name: String!
  last_name: String!
  avatar: String!
  email: String!
  phone: String!
  onboarding: Boolean!
}

# Represent shoot schedule input
input ShootInput {
  date: Time!
  contactPerson: String!
}

# Represent property caretaker input
input CaretakerInput {
  first_name: String!
  last_name: String!
  phone: String!
  countryCode: CountryCode!
  idVerification: String!
}

# Represent unit amenity input
input UnitAmenityInput {
  name: String!
  category: String!
}

# Represent property unit input
input UnitInput {
  name: String!
  price: String!
  type: String!
  amenities: [UnitAmenityInput!]!
  bedrooms: [UnitBedroomInput!]!
  baths: Int!
}

# Represent setting up property
input SetupPropertyInput {
  name: String!
  town: String!
  postalCode: String!
  propertyType: String!
  caretaker: CaretakerInput!
  units: [UnitInput!]!
  shoot: ShootInput!
  creator: String!
}

# Represent onboard user input
input OnboardUserInput {
  email: String!
  onboarding: Boolean!
}

# after signin return this
type Token {
  token: String!
}

# State after an operation
type Status {
  success: String!
}

type Query {
  getUser(email: String!): User!
  getProperty(id: ID!): Property!
  hello: String!
  searchTown(town: String!): [Town!]!
  getTowns: [Town!]!
}

type Mutation {
  signIn(input: NewUser!): Token!
  createUser(input: NewUser!): User!
  createProperty(input: NewProperty!): Property!
  addAmenity(input: AmenityInput!): Amenity!
  addPropertyUnit(input: PropertyUnitInput!): PropertyUnit!
  addUnitBedrooms(input: [UnitBedroomInput!]!): [Bedroom!]!
  addPropertyUnitTenant(input: TenancyInput!): Tenant!
  uploadImage(file: Upload!): String!
  sendVerificationCode(input: VerificationInput!): Status!
  verifyVerificationCode(input: VerificationInput!): Status!
  handshake(input: HandshakeInput!): User!
  updateUser(input: UpdateUserInput!): User!
  setupProperty(input: SetupPropertyInput!): Status!
  onboardUser(input: OnboardUserInput!): User!
}

schema {
  query: Query
  mutation: Mutation
}
