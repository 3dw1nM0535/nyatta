# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Upload
scalar UUID

# Represents new user parameters
input NewUser {
  phone: String!
}

# Represents new property parameters
input NewProperty {
  name: String!
  type: String!
  location: GpsInput!
  thumbnail: String!
  isCaretaker: Boolean!
  caretaker: CaretakerInput
}

# Represent gps input
input GpsInput {
  lat: Float!
  lng: Float!
}

# Represents new property unit parameters
input UnitInput {
  propertyId: UUID!
  baths: Int!
  name: String!
  type: String!
  amenities: [UnitAmenityInput!]!
  bedrooms: [UnitBedroomInput!]!
  price: String!
  uploads: [UploadImages!]
}

# Represent image uploads
input UploadImages {
  image: String!
  category: String!
}

# Represents new property unit bedroom(s) parameter
input UnitBedroomInput {
  bedroomNumber: Int!
  enSuite: Boolean!
  master: Boolean!
}

# Represents new property unit tenancy parameters
input TenancyInput {
  startDate: Time!
  userId: UUID!
  unitId: UUID!
}

# Represents caretaker verify verification parameters
input VerificationInput {
  phone: String!
  verifyCode: String
}

# Represents user verify verification parameters
input UserVerificationInput {
  phone: String!
  verifyCode: String!
}

# Represents caretaker verify verification parameters
input CaretakerVerificationInput {
  phone: String!
  verifyCode: String!
}

# Represents user handshake input
input HandshakeInput {
  phone: String!
}

# Represents shoot schedule input
input ShootInput {
  date: Time!
}

# Represents property caretaker input
input CaretakerInput {
  first_name: String!
  last_name: String!
  phone: String!
  image: String!
}

# Represents unit amenity input
input UnitAmenityInput {
  name: String!
  category: String!
}

# Create payment input
input CreatePaymentInput {
  phone: String!,
  amount: String!
}

# after signin return this
type Token {
  token: String!
}

# State after an operation
type Status {
  success: String!
}

# Listing summary
type ListingOverview {
  occupiedUnits: Int!
  vacantUnits: Int!
  totalUnits: Int!
}

# SignIn response
type SignInResponse {
  user: User!
  Token: String!
}

# Represents supported country codes
enum CountryCode {
  KE
}

# Represent property unit status
enum UnitState {
  VACANT
  OCCUPIED
  UNAVAILABLE
}

# Represent upload category
enum UploadCategory {
  PROFILE_IMG
  UNIT_IMAGES
  PROPERTY_THUMBNAIL
}

# Invoice status
enum InvoiceStatus {
  PROCESSED,
  PROCESSING
}

# Shoot status
enum ShootStatus {
  PENDING,
  DONE
}

# Property type
enum PropertyType {
  APARTMENTS_BUILDING,
  APARTMENT
}

type Query {
  getUser: User!
  getProperty(id: UUID!): Property!
  hello: String!
  searchTown(town: String!): [Town!]!
  getTowns: [Town!]!
  getUnits(propertyId: UUID!): [Unit!]!
  getPropertyTenancy(propertyId: UUID!): [Tenant!]!
  getUserProperties: [Property!]!
  listingOverview(propertyId: UUID!): ListingOverview!
  getListings: [Property!]!
  refreshToken: SignInResponse!
}

type Mutation {
  signIn(input: NewUser!): SignInResponse!
  createProperty(input: NewProperty!): Property!
  addUnit(input: UnitInput!): Unit!
  addUnitTenant(input: TenancyInput!): Tenant!
  uploadImage(file: Upload!): String!
  sendVerificationCode(input: VerificationInput!): Status!
  verifyUserVerificationCode(input: UserVerificationInput!): Status!
  verifyCaretakerVerificationCode(input: CaretakerVerificationInput!): Status!
  handshake(input: HandshakeInput!): User!
  saveMailing(email: String): Status!
  createPayment(input: CreatePaymentInput!): Status!
  updateUserInfo(firstName: String!, lastName: String!, avatar: String!): User!
}

schema {
  query: Query
  mutation: Mutation
}
