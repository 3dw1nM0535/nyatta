package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/3dw1nM0535/nyatta/graph/generated"
	"github.com/3dw1nM0535/nyatta/graph/model"
	"github.com/3dw1nM0535/nyatta/services"
)

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *model.User) (*model.AnyUpload, error) {
	avatar, err := ctx.Value("userService").(*services.UserServices).GetUserAvatar(obj.ID)
	if err != nil {
		return nil, err
	}
	return avatar, nil
}

// Properties is the resolver for the properties field.
func (r *userResolver) Properties(ctx context.Context, obj *model.User) ([]*model.Property, error) {
	userProperties, err := ctx.Value("propertyService").(*services.PropertyServices).PropertiesCreatedBy(obj.ID)
	if err != nil {
		return nil, err
	}
	return userProperties, nil
}

// Tenancy is the resolver for the tenancy field.
func (r *userResolver) Tenancy(ctx context.Context, obj *model.User) ([]*model.Tenant, error) {
	tenancy, err := ctx.Value("tenancyService").(*services.TenancyServices).GetUserTenancy(obj.ID)
	if err != nil {
		return nil, err
	}

	return tenancy, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
