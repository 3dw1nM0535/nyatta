package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/3dw1nM0535/nyatta/graph/model"
	"github.com/3dw1nM0535/nyatta/services"
)

// Bedrooms is the resolver for the bedrooms field.
func (r *propertyUnitResolver) Bedrooms(ctx context.Context, obj *model.Unit) ([]*model.Bedroom, error) {
	foundBedrooms, err := ctx.Value("unitService").(*services.UnitServices).GetUnitBedrooms(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return foundBedrooms, nil
}

// Property is the resolver for the property field.
func (r *propertyUnitResolver) Property(ctx context.Context, obj *model.Unit) (*model.Property, error) {
	property, err := ctx.Value("propertyService").(*services.PropertyServices).GetProperty(ctx, obj.PropertyID)
	if err != nil {
		return nil, err
	}

	return property, nil
}

// Tenant is the resolver for the tenant field.
func (r *propertyUnitResolver) Tenant(ctx context.Context, obj *model.Unit) (*model.Tenant, error) {
	tenant, err := ctx.Value("tenancyService").(*services.TenancyServices).GetCurrentTenant(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	return tenant, err
}

// Amenities is the resolver for the amenities field.
func (r *propertyUnitResolver) Amenities(ctx context.Context, obj *model.Unit) ([]*model.Amenity, error) {
	amenities, err := ctx.Value("amenityService").(*services.AmenityServices).GetUnitAmenities(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	return amenities, err
}

// Images is the resolver for the images field.
func (r *propertyUnitResolver) Images(ctx context.Context, obj *model.Unit) ([]*model.AnyUpload, error) {
	uploads, err := ctx.Value("unitService").(*services.UnitServices).GetUnitImages(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	return uploads, nil
}

// Tenancy is the resolver for the tenancy field.
func (r *propertyUnitResolver) Tenancy(ctx context.Context, obj *model.Unit) ([]*model.Tenant, error) {
	foundTenancies, err := ctx.Value("tenancyService").(*services.TenancyServices).GetUnitTenancy(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return foundTenancies, nil
}

type propertyUnitResolver struct{ *Resolver }
